function create_dc_microgrid_simulink_blocks()
% CREATE_DC_MICROGRID_SIMULINK_BLOCKS
% Creates a Simulink model for DC Microgrid with subsystem blocks
% Author: Nivas D. Navghare
% Institution: COEP Technological University, Pune

%% Close any existing models
close_all;
bdclose('all');

%% Create new Simulink model
modelName = 'DC_Microgrid_Model';
new_system(modelName);
open_system(modelName);

fprintf('Creating DC Microgrid Simulink Model...\n');
fprintf('=========================================\n\n');

%% Set model parameters
set_param(modelName, 'Solver', 'ode45');
set_param(modelName, 'StartTime', '0');
set_param(modelName, 'StopTime', '86400'); % 24 hours in seconds
set_param(modelName, 'MaxStep', '1'); % 1 second max step

%% Define block positions
% Vertical spacing
vspace = 100;
hspace = 200;

% Starting positions
x0 = 50;
y0 = 50;

%% 1. Create Environmental Input Blocks
fprintf('[1/10] Creating Environmental Input Blocks...\n');

% Solar Irradiance Block
pos_irradiance = [x0, y0, x0+120, y0+60];
add_block('simulink/Sources/Signal Generator', [modelName '/Solar_Irradiance'], ...
    'Position', pos_irradiance, ...
    'WaveForm', 'sine', ...
    'Amplitude', '1000', ...
    'Frequency', '2*pi/86400', ...
    'BackgroundColor', 'yellow');

% Temperature Block
pos_temp = [x0, y0+vspace, x0+120, y0+vspace+60];
add_block('simulink/Sources/Signal Generator', [modelName '/Temperature'], ...
    'Position', pos_temp, ...
    'WaveForm', 'sine', ...
    'Amplitude', '10', ...
    'Frequency', '2*pi/86400', ...
    'BackgroundColor', 'orange');

% Wind Speed Block
pos_wind = [x0, y0+2*vspace, x0+120, y0+2*vspace+60];
add_block('simulink/Sources/Signal Generator', [modelName '/Wind_Speed'], ...
    'Position', pos_wind, ...
    'WaveForm', 'sine', ...
    'Amplitude', '4', ...
    'Frequency', '2*pi/86400', ...
    'BackgroundColor', 'cyan');

%% 2. Create PV System Block
fprintf('[2/10] Creating PV System Block...\n');

pos_pv = [x0+hspace, y0, x0+hspace+150, y0+80];
add_block('simulink/User-Defined Functions/MATLAB Function', [modelName '/PV_System'], ...
    'Position', pos_pv, ...
    'BackgroundColor', 'yellow');

% Set PV MATLAB Function code
pvCode = sprintf(['function P_pv = fcn(irradiance, temp)\n' ...
    '%% PV System Model\n' ...
    'Panel_area = 600;  %% m^2\n' ...
    'efficiency = 0.18;\n' ...
    'temp_coeff = -0.004;\n' ...
    'rated_power = 100; %% kW\n\n' ...
    'temp_factor = 1 + temp_coeff * (temp - 25);\n' ...
    'P_pv = (irradiance/1000) * Panel_area * efficiency * temp_factor;\n' ...
    'P_pv = min(P_pv, rated_power);\n']);

set_param([modelName '/PV_System'], 'Script', pvCode);

%% 3. Create Wind Turbine Block
fprintf('[3/10] Creating Wind Turbine Block...\n');

pos_wind_turbine = [x0+hspace, y0+2*vspace, x0+hspace+150, y0+2*vspace+80];
add_block('simulink/User-Defined Functions/MATLAB Function', [modelName '/Wind_Turbine'], ...
    'Position', pos_wind_turbine, ...
    'BackgroundColor', 'cyan');

% Set Wind Turbine MATLAB Function code
windCode = sprintf(['function P_wind = fcn(wind_speed)\n' ...
    '%% Wind Turbine Model\n' ...
    'rated_power = 50;  %% kW\n' ...
    'v_cutin = 3;       %% m/s\n' ...
    'v_rated = 12;      %% m/s\n' ...
    'v_cutout = 25;     %% m/s\n\n' ...
    'if wind_speed < v_cutin || wind_speed > v_cutout\n' ...
    '    P_wind = 0;\n' ...
    'elseif wind_speed >= v_rated\n' ...
    '    P_wind = rated_power;\n' ...
    'else\n' ...
    '    P_wind = rated_power * ((wind_speed - v_cutin)/(v_rated - v_cutin))^3;\n' ...
    'end\n']);

set_param([modelName '/Wind_Turbine'], 'Script', windCode);

%% 4. Create Sum Block for Total Generation
fprintf('[4/10] Creating Power Summation Block...\n');

pos_sum_gen = [x0+2*hspace, y0+vspace, x0+2*hspace+60, y0+vspace+60];
add_block('simulink/Math Operations/Add', [modelName '/Total_Generation'], ...
    'Position', pos_sum_gen, ...
    'Inputs', '++', ...
    'BackgroundColor', 'green');

%% 5. Create Load Block
fprintf('[5/10] Creating Load Demand Block...\n');

pos_load = [x0, y0+4*vspace, x0+120, y0+4*vspace+60];
add_block('simulink/Sources/Signal Generator', [modelName '/Load_Demand'], ...
    'Position', pos_load, ...
    'WaveForm', 'sine', ...
    'Amplitude', '30', ...
    'Frequency', '2*pi/86400', ...
    'BackgroundColor', 'red');

%% 6. Create Power Balance Block
fprintf('[6/10] Creating Power Balance Block...\n');

pos_balance = [x0+2.5*hspace, y0+2*vspace, x0+2.5*hspace+60, y0+2*vspace+60];
add_block('simulink/Math Operations/Subtract', [modelName '/Power_Balance'], ...
    'Position', pos_balance, ...
    'BackgroundColor', 'lightblue');

%% 7. Create Battery Management System Block
fprintf('[7/10] Creating Battery Management System...\n');

pos_bms = [x0+3*hspace, y0+2*vspace, x0+3*hspace+150, y0+2*vspace+100];
add_block('simulink/User-Defined Functions/MATLAB Function', [modelName '/Battery_BMS'], ...
    'Position', pos_bms, ...
    'BackgroundColor', 'magenta');

% Set Battery BMS MATLAB Function code
bmsCode = sprintf(['function [P_batt, SOC] = fcn(P_deficit, SOC_prev)\n' ...
    '%% Battery Management System\n' ...
    'capacity = 200;           %% kWh\n' ...
    'max_charge = 50;          %% kW\n' ...
    'max_discharge = 50;       %% kW\n' ...
    'efficiency = 0.95;\n' ...
    'SOC_min = 0.2;\n' ...
    'SOC_max = 0.9;\n' ...
    'dt = 1/3600;              %% 1 second in hours\n\n' ...
    'if P_deficit > 0  %% Need to discharge\n' ...
    '    P_batt = min(P_deficit, max_discharge);\n' ...
    '    energy = P_batt * dt / efficiency;\n' ...
    '    SOC = SOC_prev - energy / capacity;\n' ...
    '    if SOC < SOC_min\n' ...
    '        P_batt = (SOC_prev - SOC_min) * capacity * efficiency / dt;\n' ...
    '        SOC = SOC_min;\n' ...
    '    end\n' ...
    '    P_batt = -P_batt;  %% Negative for discharge\n' ...
    'elseif P_deficit < 0  %% Can charge\n' ...
    '    P_batt = min(-P_deficit, max_charge);\n' ...
    '    energy = P_batt * dt * efficiency;\n' ...
    '    SOC = SOC_prev + energy / capacity;\n' ...
    '    if SOC > SOC_max\n' ...
    '        P_batt = (SOC_max - SOC_prev) * capacity / (dt * efficiency);\n' ...
    '        SOC = SOC_max;\n' ...
    '    end\n' ...
    'else\n' ...
    '    P_batt = 0;\n' ...
    '    SOC = SOC_prev;\n' ...
    'end\n']);

set_param([modelName '/Battery_BMS'], 'Script', bmsCode);

%% 8. Add Unit Delay for SOC feedback
fprintf('[8/10] Creating State Feedback Block...\n');

pos_delay = [x0+3.5*hspace, y0+3*vspace, x0+3.5*hspace+60, y0+3*vspace+40];
add_block('simulink/Discrete/Unit Delay', [modelName '/SOC_Delay'], ...
    'Position', pos_delay, ...
    'InitialCondition', '0.5', ...
    'BackgroundColor', 'gray');

%% 9. Create Scope Blocks for Monitoring
fprintf('[9/10] Creating Monitoring Scopes...\n');

% Power Scope
pos_scope_power = [x0+4*hspace, y0, x0+4*hspace+100, y0+80];
add_block('simulink/Sinks/Scope', [modelName '/Power_Scope'], ...
    'Position', pos_scope_power, ...
    'NumInputPorts', '4', ...
    'BackgroundColor', 'lightgreen');

% SOC Scope
pos_scope_soc = [x0+4*hspace, y0+2*vspace, x0+4*hspace+100, y0+2*vspace+60];
add_block('simulink/Sinks/Scope', [modelName '/SOC_Scope'], ...
    'Position', pos_scope_soc, ...
    'BackgroundColor', 'lightgreen');

% Voltage Monitor (DC Bus)
pos_voltage = [x0+2*hspace, y0+3*vspace, x0+2*hspace+120, y0+3*vspace+60];
add_block('simulink/Sources/Constant', [modelName '/DC_Bus_Voltage'], ...
    'Position', pos_voltage, ...
    'Value', '380', ...
    'BackgroundColor', 'magenta');

%% 10. Create Display Blocks
fprintf('[10/10] Creating Display Blocks...\n');

% PV Power Display
pos_disp_pv = [x0+2*hspace, y0, x0+2*hspace+60, y0+30];
add_block('simulink/Sinks/Display', [modelName '/PV_Power_Display'], ...
    'Position', pos_disp_pv);

% Wind Power Display
pos_disp_wind = [x0+2*hspace, y0+2*vspace, x0+2*hspace+60, y0+2*vspace+30];
add_block('simulink/Sinks/Display', [modelName '/Wind_Power_Display'], ...
    'Position', pos_disp_wind);

% SOC Display
pos_disp_soc = [x0+4*hspace, y0+3*vspace, x0+4*hspace+60, y0+3*vspace+30];
add_block('simulink/Sinks/Display', [modelName '/SOC_Display'], ...
    'Position', pos_disp_soc);

%% Connect Blocks
fprintf('\nConnecting blocks...\n');

% PV connections
add_line(modelName, 'Solar_Irradiance/1', 'PV_System/1', 'autorouting', 'on');
add_line(modelName, 'Temperature/1', 'PV_System/2', 'autorouting', 'on');
add_line(modelName, 'PV_System/1', 'Total_Generation/1', 'autorouting', 'on');
add_line(modelName, 'PV_System/1', 'PV_Power_Display/1', 'autorouting', 'on');

% Wind connections
add_line(modelName, 'Wind_Speed/1', 'Wind_Turbine/1', 'autorouting', 'on');
add_line(modelName, 'Wind_Turbine/1', 'Total_Generation/2', 'autorouting', 'on');
add_line(modelName, 'Wind_Turbine/1', 'Wind_Power_Display/1', 'autorouting', 'on');

% Power balance connections
add_line(modelName, 'Total_Generation/1', 'Power_Balance/1', 'autorouting', 'on');
add_line(modelName, 'Load_Demand/1', 'Power_Balance/2', 'autorouting', 'on');

% Battery connections
add_line(modelName, 'Power_Balance/1', 'Battery_BMS/1', 'autorouting', 'on');
add_line(modelName, 'SOC_Delay/1', 'Battery_BMS/2', 'autorouting', 'on');
add_line(modelName, 'Battery_BMS/2', 'SOC_Delay/1', 'autorouting', 'on');

% Monitoring connections
add_line(modelName, 'PV_System/1', 'Power_Scope/1', 'autorouting', 'on');
add_line(modelName, 'Wind_Turbine/1', 'Power_Scope/2', 'autorouting', 'on');
add_line(modelName, 'Load_Demand/1', 'Power_Scope/3', 'autorouting', 'on');
add_line(modelName, 'Battery_BMS/1', 'Power_Scope/4', 'autorouting', 'on');
add_line(modelName, 'Battery_BMS/2', 'SOC_Scope/1', 'autorouting', 'on');
add_line(modelName, 'Battery_BMS/2', 'SOC_Display/1', 'autorouting', 'on');

%% Configure Scopes
fprintf('Configuring scopes...\n');

% Power Scope configuration
set_param([modelName '/Power_Scope'], 'YMin', '-60', 'YMax', '120');
set_param([modelName '/Power_Scope'], 'NumInputPorts', '4');
set_param([modelName '/Power_Scope'], 'NamePlacement', 'alternate');

% SOC Scope configuration
set_param([modelName '/SOC_Scope'], 'YMin', '0', 'YMax', '1');

%% Add annotations
fprintf('Adding annotations...\n');

% Title annotation
add_block('built-in/Note', [modelName '/Title'], ...
    'Position', [x0+hspace, y0-50, x0+2*hspace, y0-20], ...
    'Text', 'DC MICROGRID SIMULINK MODEL', ...
    'FontSize', 14, ...
    'FontWeight', 'bold');

% Input section annotation
add_block('built-in/Note', [modelName '/EnvInputs'], ...
    'Position', [x0, y0-30, x0+100, y0-10], ...
    'Text', 'Environmental Inputs', ...
    'FontSize', 10);

% Generation section annotation
add_block('built-in/Note', [modelName '/Generation'], ...
    'Position', [x0+hspace, y0+vspace-30, x0+hspace+120, y0+vspace-10], ...
    'Text', 'Renewable Generation', ...
    'FontSize', 10);

% Storage section annotation
add_block('built-in/Note', [modelName '/Storage'], ...
    'Position', [x0+3*hspace, y0+2*vspace-30, x0+3*hspace+120, y0+2*vspace-10], ...
    'Text', 'Energy Storage System', ...
    'FontSize', 10);

%% Save and arrange model
fprintf('Arranging and saving model...\n');

% Auto-arrange blocks
Simulink.BlockDiagram.arrangeSystem(modelName);

% Save model
save_system(modelName, ['matlab_simulation/' modelName '.slx']);

fprintf('\n=========================================\n');
fprintf('✓ Simulink model created successfully!\n');
fprintf('  Model name: %s\n', modelName);
fprintf('  Location: matlab_simulation/%s.slx\n', modelName);
fprintf('=========================================\n\n');

fprintf('Model contains:\n');
fprintf('  - Environmental input blocks (Solar, Wind, Temperature)\n');
fprintf('  - PV System block with MPPT\n');
fprintf('  - Wind Turbine block with power curve\n');
fprintf('  - Battery Management System with SOC tracking\n');
fprintf('  - Power balance calculations\n');
fprintf('  - Real-time monitoring scopes\n');
fprintf('  - Display blocks for key parameters\n\n');

fprintf('To run the simulation:\n');
fprintf('  1. Open the model: open_system(''%s'')\n', modelName);
fprintf('  2. Click the Run button or use: sim(''%s'')\n', modelName);
fprintf('  3. View results in scopes\n\n');

end
